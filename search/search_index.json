{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Cattlechain 4.0 Introduction Cattlechain 4.0, a disruptive supply chain solution to increase farm productivity and sustainability while promoting animal welfare, focused on overcoming various EU livestock sector challenges and to democratize the access to smart technologies by livestock. The solution implements a complete monitoring solution for cattle based on IoT wearables, Artificial Intelligence (AI) algorithms, FIWARE, Sentinel satellite imagery, and blockchain technologies. In this proposal, we are only designing and developing an architecture for blockchain implementation. In this system, blockchain technology is used to assure full traceability and transparency along the whole supply chain. Data coming from the IoT sensors are directly stored (without human intervention) and made available for traceability and certification purposes, and it is integrated with FIWARE technologies to generate an Open Platform, where consumers and public authorities can consult the information about the meat and dairy supply chain through data market places, management apps, and tracking modules. The system also implements an Blockchain assured Animal Welfare Indicator that ensures that the meat and dairy products comply with the highest animal welfare standards without the need to involve a certification body. The seal granted process relies on the automatic evaluation of the data provided by the IoT devices whose truthfulness is guaranteed by the blockchain. This information is available for public authorities, retailers, and consumers. At the same time, the Animal Welfare Seal increases consumers\u2019 acceptance of products carrying it, increasing companies and farmers\u2019 willingness to use our system.","title":"Home"},{"location":"index.html#cattlechain-40","text":"","title":"Cattlechain 4.0"},{"location":"index.html#introduction","text":"Cattlechain 4.0, a disruptive supply chain solution to increase farm productivity and sustainability while promoting animal welfare, focused on overcoming various EU livestock sector challenges and to democratize the access to smart technologies by livestock. The solution implements a complete monitoring solution for cattle based on IoT wearables, Artificial Intelligence (AI) algorithms, FIWARE, Sentinel satellite imagery, and blockchain technologies. In this proposal, we are only designing and developing an architecture for blockchain implementation. In this system, blockchain technology is used to assure full traceability and transparency along the whole supply chain. Data coming from the IoT sensors are directly stored (without human intervention) and made available for traceability and certification purposes, and it is integrated with FIWARE technologies to generate an Open Platform, where consumers and public authorities can consult the information about the meat and dairy supply chain through data market places, management apps, and tracking modules. The system also implements an Blockchain assured Animal Welfare Indicator that ensures that the meat and dairy products comply with the highest animal welfare standards without the need to involve a certification body. The seal granted process relies on the automatic evaluation of the data provided by the IoT devices whose truthfulness is guaranteed by the blockchain. This information is available for public authorities, retailers, and consumers. At the same time, the Animal Welfare Seal increases consumers\u2019 acceptance of products carrying it, increasing companies and farmers\u2019 willingness to use our system.","title":"Introduction"},{"location":"architecture.html","text":"Cattlechain Architecture CattleChain core platform is consist of various FIWARE Generic Enablers. Figure present the architecture of the CattleChain platform. Generic Enablers A Context Broker Generic Enabler is the core and mandatory component of any \u201cPowered by FIWARE\u201d platform or solution. It enables to manage context information in a highly decentralized and large-scale manner. In the CattleChain Project there are the generic enablers has been used: KeyRock Keyrock is the FIWARE component responsible for Identity Management. Using Keyrock (in conjunction with other security components such as PEP Proxy and Authzforce) enables you to add OAuth2-based authentication and authorization security to your services and applications. The main identity management concepts within Keyrock are: Users: Have a registered account in Keyrock. Can manage organizations and register applications. Organizations: Are group of users that share resources of an application (roles and permissions). Users can be members or owners (manage the organization). Applications: has the client role in the OAuth 2.0 architecture and will request protected user data. Are able to authenticate users using their Oauth credentials (ID and secret) which unequivocally identify the application Define roles and permissions to manage authorization of users and organizations Can register Pep Proxy to protect backends. Can register IoT Agents. Keyrock provides both a GUI and an API interface. to know more about keyrock please follow keyrock documentation . PEP Proxy- Wilma Wilma is a PEP Proxy - it can be combined with other security components such as Keyrock and Authzforce to enforce access control to your backend applications. This means that only permitted users will be able to access your Generic Enablers or REST services. Identity Management allows you to manage specific permissions and policies to resources allowing different access levels for your users. to know more about wilma please follow Wilma documentation . important: to enable the Canis Major integration please use the fork version of PEP Proxy source code can be found in FIWARE-BLOCKCHAIN github Orion-LD (Core) Orion-LD is an alternative NGSI-LD Context Broker written in C/C++. It is a standalone executable and therefore small, fast, lightweight and easy to handle. Context brokers allow for the management and requesting context of information in a structured manner based on linked data standards following the NGSI-LD specification. Orion-LD is more suitable for smaller installations or possibly in embedded environments - it currentlys supports only a subset of the standard NGSI-LD endpoints. Documentation Quantumleap QuantumLeap is a REST service for storing, querying and retrieving NGSI v2 and NGSI-LD (experimental support) spatial-temporal data. QuantumLeap converts NGSI semi-structured data into tabular format and stores it in a time-series database, associating each database record with a time index and, if present in the NGSI data, a location on Earth. REST clients can then retrieve NGSI entities by filtering entity sets through time ranges and spatial operators. Note that, from the client's stand point, these queries are defined on NGSI entities as opposed to database tables. However, the query functionality available through the REST interface is quite basic and most complex queries typically require clients to use the database directly. Documentation Cosmos The Cosmos BigData Analysis GE is a set of tools that help achieving the tasks of Streaming and Batch processing over context data. Documentation Cosmos ORION-SPARK Connector: The Cosmos Generic Enabler enables easier BigData analysis over context, integrated with some of the most popular BigData platforms. Documentation CanisMajor - Blockchain Adaptor Under Development CanisMajor is a blockchain adaptor that supports various DLTs, the adaptor aims to submit the data to DLT and works with NGSI-LD and NGSI-V2 as well. CanisMajor Adaptor recommend using AEI contract Model for the Ethereum Clients. AEI (Asset,Event, Identity) Smart Contract is written in Solidity using ERC721 standard (NFT). to know more about CanisMajor please follow CanisMajor documentation . Canis Major recommend to use the AEI Contract Model . AEI Smart Contract is written in Solidity using ERC721 standard (NFT) and can be use with Ethereum Clients. It is compatible with FIWARE-Canis Major Adaptor to store the data in blockchain. AEI, asset, events (metadata), relationship, is designed to store the NGSI-LD model with the help of Canis Major Adaptor. Taurus - LedgerSync Under Development Taurus is a blockchain listener that supports various DLT, and the listener aims to listen to Blockchain Events and store data in FIWARE. This component compliments FIWARE as an OffChainDB. Link . Important: Currently Taurus is not integrated in the project but will be soon","title":"Architecture"},{"location":"architecture.html#cattlechain-architecture","text":"CattleChain core platform is consist of various FIWARE Generic Enablers. Figure present the architecture of the CattleChain platform.","title":"Cattlechain Architecture"},{"location":"architecture.html#generic-enablers","text":"A Context Broker Generic Enabler is the core and mandatory component of any \u201cPowered by FIWARE\u201d platform or solution. It enables to manage context information in a highly decentralized and large-scale manner. In the CattleChain Project there are the generic enablers has been used:","title":"Generic Enablers"},{"location":"architecture.html#keyrock","text":"Keyrock is the FIWARE component responsible for Identity Management. Using Keyrock (in conjunction with other security components such as PEP Proxy and Authzforce) enables you to add OAuth2-based authentication and authorization security to your services and applications. The main identity management concepts within Keyrock are: Users: Have a registered account in Keyrock. Can manage organizations and register applications. Organizations: Are group of users that share resources of an application (roles and permissions). Users can be members or owners (manage the organization). Applications: has the client role in the OAuth 2.0 architecture and will request protected user data. Are able to authenticate users using their Oauth credentials (ID and secret) which unequivocally identify the application Define roles and permissions to manage authorization of users and organizations Can register Pep Proxy to protect backends. Can register IoT Agents. Keyrock provides both a GUI and an API interface. to know more about keyrock please follow keyrock documentation .","title":"KeyRock"},{"location":"architecture.html#pep-proxy-wilma","text":"Wilma is a PEP Proxy - it can be combined with other security components such as Keyrock and Authzforce to enforce access control to your backend applications. This means that only permitted users will be able to access your Generic Enablers or REST services. Identity Management allows you to manage specific permissions and policies to resources allowing different access levels for your users. to know more about wilma please follow Wilma documentation . important: to enable the Canis Major integration please use the fork version of PEP Proxy source code can be found in FIWARE-BLOCKCHAIN github","title":"PEP Proxy- Wilma"},{"location":"architecture.html#orion-ld-core","text":"Orion-LD is an alternative NGSI-LD Context Broker written in C/C++. It is a standalone executable and therefore small, fast, lightweight and easy to handle. Context brokers allow for the management and requesting context of information in a structured manner based on linked data standards following the NGSI-LD specification. Orion-LD is more suitable for smaller installations or possibly in embedded environments - it currentlys supports only a subset of the standard NGSI-LD endpoints. Documentation","title":"Orion-LD (Core)"},{"location":"architecture.html#quantumleap","text":"QuantumLeap is a REST service for storing, querying and retrieving NGSI v2 and NGSI-LD (experimental support) spatial-temporal data. QuantumLeap converts NGSI semi-structured data into tabular format and stores it in a time-series database, associating each database record with a time index and, if present in the NGSI data, a location on Earth. REST clients can then retrieve NGSI entities by filtering entity sets through time ranges and spatial operators. Note that, from the client's stand point, these queries are defined on NGSI entities as opposed to database tables. However, the query functionality available through the REST interface is quite basic and most complex queries typically require clients to use the database directly. Documentation","title":"Quantumleap"},{"location":"architecture.html#cosmos","text":"The Cosmos BigData Analysis GE is a set of tools that help achieving the tasks of Streaming and Batch processing over context data. Documentation","title":"Cosmos"},{"location":"architecture.html#cosmos-orion-spark-connector","text":"The Cosmos Generic Enabler enables easier BigData analysis over context, integrated with some of the most popular BigData platforms. Documentation","title":"Cosmos ORION-SPARK Connector:"},{"location":"architecture.html#canismajor-blockchain-adaptor","text":"Under Development CanisMajor is a blockchain adaptor that supports various DLTs, the adaptor aims to submit the data to DLT and works with NGSI-LD and NGSI-V2 as well. CanisMajor Adaptor recommend using AEI contract Model for the Ethereum Clients. AEI (Asset,Event, Identity) Smart Contract is written in Solidity using ERC721 standard (NFT). to know more about CanisMajor please follow CanisMajor documentation . Canis Major recommend to use the AEI Contract Model . AEI Smart Contract is written in Solidity using ERC721 standard (NFT) and can be use with Ethereum Clients. It is compatible with FIWARE-Canis Major Adaptor to store the data in blockchain. AEI, asset, events (metadata), relationship, is designed to store the NGSI-LD model with the help of Canis Major Adaptor.","title":"CanisMajor - Blockchain Adaptor"},{"location":"architecture.html#taurus-ledgersync","text":"Under Development Taurus is a blockchain listener that supports various DLT, and the listener aims to listen to Blockchain Events and store data in FIWARE. This component compliments FIWARE as an OffChainDB. Link . Important: Currently Taurus is not integrated in the project but will be soon","title":"Taurus - LedgerSync"},{"location":"blockchain_operations.html","text":"Blockchain Operations Introduction The blockchain interaction in CattleChain project is really staright forward, earlier the development was happening using Hyperledger Sawtooth, as sawtooth lack in various aspect and we decided to use the stable/proven blockchain technology. To do so we are currenlty using Alastria Network, a non-profit association that promotes the digital economy through the development of decentralised ledger technologies/Blockchain and also a member of FIWARE. Alastria partners have two operational networks (Network T and Network B) on which nodes can be deployed (either regular nodes or critical: validators and bootnodes). The first of Alastria\u2019s partner node networks (Red T) is built on Quorum technology,an open-source Ethereum client developed under the LGPL license and written in Go. GoQuorum is an Ethereum-based protocol that runs private, permissioned networks. To know more about it follow here: Alastria Network Quorum Technology Use of AEI Contract CattleChain project using AEI (Asset, Event, Identity) Standard Contract. AEI Smart Contract is written in Solidity using ERC721 standard (NFT) and can be use with Ethereum Clients. It is compatible with FIWARE-Canis Major Adaptor to store the data in blockchain. AEI, asset, events (metadata), identity, is designed to store the NGSI-LD model with the help of Canis Major Adaptor. ERC 721 Contract is follow OpenZepplin standards, security audits are trusted by leading organizations building decentralized systems. ERC 721 ERC 721 A standard interface for non-fungible tokens, also known as deeds. The following standard allows for the implementation of a standard API for NFTs within smart contracts. This standard provides basic functionality to track and transfer NFTs. We considered use cases of NFTs being owned and transacted by individuals as well as consignment to third party brokers/wallets/auctioneers (\u201coperators\u201d). NFTs can represent ownership over digital or physical assets. We considered a diverse universe of assets, and we know you will dream up many more: Physical property \u2014 houses, unique artwork Virtual collectables \u2014 unique pictures of kittens, collectable cards \u201cNegative value\u201d assets \u2014 loans, burdens and other responsibilities In general, all houses are distinct and no two kittens are alike. NFTs are distinguishable and you must track the ownership of each one separately. to know more follow here: ERC 721 OpenZepplin ERC721 AEI Contract Design AEI contract is cosist of 3 aspects (see the figure below): Entity/Asset with a unique identity will be a new asset (1:1 mapping of asset to an identity). Event or Metadata of the asset/entity has a 1:n mapping. An Asset can have a 1:n relationship with any other asset. Example To Store the NGSI-LD model there are few possibilities with the help of some supported storage type: IPFS IOTA MaM MerkleRoot Methods - createAsset(bytes32 uuid, string memory _newHash) - getAsset(bytes32 uuid) - updateAsset(bytes32 uuid, string memory _newHash) - removeAsset (bytes32 uuid) - isValidAsset(bytes32 uuid, bytes32[] memory _proof, bytes32 _leaf) - isValidAssetEthMessage(bytes32 uuid, bytes32 _messageHash, bytes memory _signature) - addRelation(bytes32 uuid, bytes32 reluuid) - getRelations(bytes32 uuid) - removeRelation(bytes32 uuid, uint index) - isValidRelation(bytes32 uuid, uint index, bytes32[] memory _proof, bytes32 _leaf) - addMetadata(bytes32 uuid, string memory _metadatahash) - getMetadatas(bytes32 uuid) public view returns (string[] memory) - removeMetadata(bytes32 uuid, uint index) - isValidMetadata(bytes32 uuid, uint index, bytes32[] memory _proof, bytes32 _leaf) Apart from that ERC721, Ownable, MerkleProof, ECDSA methods are supported. Dependencies This project uses: - truffle - NodeJS - Ganache-CLI (testrpc) - OpenZeppelin to know more follow here: GitHub Source Use of Canis Major CanisMajor is a blockchain adaptor that supports various DLT. Canis Major Design The way Canis Major work's in 'Powered By FIWARE' architecture as follows: Request from the user is consist of the Payload, Header with token and DLT_ID (base64 of public key and private key of the blockchain). Wilma PEP Proxy validate the token and check with the KeyRock IDM and validate the user, permission (Authentication and Autherisation). Once the user is validate Wilma forward the request to the Context Broker and persist it. Once the Payload stored in Context Broker Wilma notify to Canis Major with the configuration such as what attribute of the payload should be store, Blockchain Identity of the user. Futher Canis Major persist the data in blockchain using AEI contract (will be explained futher in this chapter). Github Souce Documentation Usages Creation of an Entity (Animal, Farm etc) Creation of an entity goes as follow: Actor create an request with a payload to PEP Proxy. the request is consist of the payload and in header TOKEN (generate from the keyrock IDM) and the DLT_KEYS (which is a base64 for public and private key of the wallet). Wilma autherize the request of the user by validating it from the keyrock IDM. On Success wilma submit the request to the Context Broker and the entity will be store. On Successfully entity creation wilma notify the CanisMajor Adaptor to persist the entity in blockchain (where the smart contract is already configured). Willma notify the CanisMajor with payload, dlt_keys in header and it also support option ctx_map (which allow user to mention what particular keys from the payload should be persist in the smart contract). Canis Major further validate the DLT_KEY (identity), create a signed transaction and submit it to the blockchain. Here we are using AEI_Contract and the createAsset method of the contract is called. On successful transacation creation the tx_reciept of the transaction will be available in canis major, which can be queried any time. Adding Metadata (eventy) on an Entity (Animal, Farm etc) Adding Metadata on an entity goes as follow: Actor create an request with a payload to PEP Proxy. the request is consist of the payload and in header TOKEN (generate from the keyrock IDM) and the DLT_KEYS (which is a base64 for public and private key of the wallet). Wilma autherize the request of the user by validating it from the keyrock IDM. On Success wilma submit the request to the Context Broker with the meta information and entity_id. On Successfully entity creation wilma notify the CanisMajor Adaptor to persist the entity in blockchain (where the smart contract is already configured). Willma notify the CanisMajor with payload, dlt_keys in header and it also support option ctx_map (which allow user to mention what particular keys from the payload should be persist in the smart contract). Canis Major further validate the DLT_KEY (identity), create a signed transaction and submit it to the blockchain. here the request is for adding the metadata, canis major will call AddMetadata method of the AEI Contract. On successful transacation creation the tx_reciept of the transaction will be available in canis major, which can be queried any time. Qyery Quering the data on blockchain goes as follow: Actor send a request to canis major with the Entity_ID. Canis major check the transaction details from the local storage and fetch the reciept. Canis Major futher call the AEI contarct, getAsset method and the fetch the stored hash. Hash will be returned back to the hash. **Note: the returned Hash could be a IPFS Hash, IOTAMaM hash or MerkleRoot, depend on the configuration of the CanisMajor and data from the has can be fetched or validated from the canismajor query apis (for more checkout the canismajor api specification)\"","title":"Blockchain Operations"},{"location":"blockchain_operations.html#blockchain-operations","text":"","title":"Blockchain Operations"},{"location":"blockchain_operations.html#introduction","text":"The blockchain interaction in CattleChain project is really staright forward, earlier the development was happening using Hyperledger Sawtooth, as sawtooth lack in various aspect and we decided to use the stable/proven blockchain technology. To do so we are currenlty using Alastria Network, a non-profit association that promotes the digital economy through the development of decentralised ledger technologies/Blockchain and also a member of FIWARE. Alastria partners have two operational networks (Network T and Network B) on which nodes can be deployed (either regular nodes or critical: validators and bootnodes). The first of Alastria\u2019s partner node networks (Red T) is built on Quorum technology,an open-source Ethereum client developed under the LGPL license and written in Go. GoQuorum is an Ethereum-based protocol that runs private, permissioned networks. To know more about it follow here: Alastria Network Quorum Technology","title":"Introduction"},{"location":"blockchain_operations.html#use-of-aei-contract","text":"CattleChain project using AEI (Asset, Event, Identity) Standard Contract. AEI Smart Contract is written in Solidity using ERC721 standard (NFT) and can be use with Ethereum Clients. It is compatible with FIWARE-Canis Major Adaptor to store the data in blockchain. AEI, asset, events (metadata), identity, is designed to store the NGSI-LD model with the help of Canis Major Adaptor. ERC 721 Contract is follow OpenZepplin standards, security audits are trusted by leading organizations building decentralized systems.","title":"Use of AEI Contract"},{"location":"blockchain_operations.html#erc-721","text":"ERC 721 A standard interface for non-fungible tokens, also known as deeds. The following standard allows for the implementation of a standard API for NFTs within smart contracts. This standard provides basic functionality to track and transfer NFTs. We considered use cases of NFTs being owned and transacted by individuals as well as consignment to third party brokers/wallets/auctioneers (\u201coperators\u201d). NFTs can represent ownership over digital or physical assets. We considered a diverse universe of assets, and we know you will dream up many more: Physical property \u2014 houses, unique artwork Virtual collectables \u2014 unique pictures of kittens, collectable cards \u201cNegative value\u201d assets \u2014 loans, burdens and other responsibilities In general, all houses are distinct and no two kittens are alike. NFTs are distinguishable and you must track the ownership of each one separately. to know more follow here: ERC 721 OpenZepplin ERC721","title":"ERC 721"},{"location":"blockchain_operations.html#aei-contract-design","text":"AEI contract is cosist of 3 aspects (see the figure below): Entity/Asset with a unique identity will be a new asset (1:1 mapping of asset to an identity). Event or Metadata of the asset/entity has a 1:n mapping. An Asset can have a 1:n relationship with any other asset.","title":"AEI Contract Design"},{"location":"blockchain_operations.html#example","text":"To Store the NGSI-LD model there are few possibilities with the help of some supported storage type: IPFS IOTA MaM MerkleRoot","title":"Example"},{"location":"blockchain_operations.html#methods","text":"- createAsset(bytes32 uuid, string memory _newHash) - getAsset(bytes32 uuid) - updateAsset(bytes32 uuid, string memory _newHash) - removeAsset (bytes32 uuid) - isValidAsset(bytes32 uuid, bytes32[] memory _proof, bytes32 _leaf) - isValidAssetEthMessage(bytes32 uuid, bytes32 _messageHash, bytes memory _signature) - addRelation(bytes32 uuid, bytes32 reluuid) - getRelations(bytes32 uuid) - removeRelation(bytes32 uuid, uint index) - isValidRelation(bytes32 uuid, uint index, bytes32[] memory _proof, bytes32 _leaf) - addMetadata(bytes32 uuid, string memory _metadatahash) - getMetadatas(bytes32 uuid) public view returns (string[] memory) - removeMetadata(bytes32 uuid, uint index) - isValidMetadata(bytes32 uuid, uint index, bytes32[] memory _proof, bytes32 _leaf) Apart from that ERC721, Ownable, MerkleProof, ECDSA methods are supported.","title":"Methods"},{"location":"blockchain_operations.html#dependencies","text":"This project uses: - truffle - NodeJS - Ganache-CLI (testrpc) - OpenZeppelin to know more follow here: GitHub Source","title":"Dependencies"},{"location":"blockchain_operations.html#use-of-canis-major","text":"CanisMajor is a blockchain adaptor that supports various DLT.","title":"Use of Canis Major"},{"location":"blockchain_operations.html#canis-major-design","text":"The way Canis Major work's in 'Powered By FIWARE' architecture as follows: Request from the user is consist of the Payload, Header with token and DLT_ID (base64 of public key and private key of the blockchain). Wilma PEP Proxy validate the token and check with the KeyRock IDM and validate the user, permission (Authentication and Autherisation). Once the user is validate Wilma forward the request to the Context Broker and persist it. Once the Payload stored in Context Broker Wilma notify to Canis Major with the configuration such as what attribute of the payload should be store, Blockchain Identity of the user. Futher Canis Major persist the data in blockchain using AEI contract (will be explained futher in this chapter). Github Souce Documentation","title":"Canis Major Design"},{"location":"blockchain_operations.html#usages","text":"","title":"Usages"},{"location":"blockchain_operations.html#creation-of-an-entity-animal-farm-etc","text":"Creation of an entity goes as follow: Actor create an request with a payload to PEP Proxy. the request is consist of the payload and in header TOKEN (generate from the keyrock IDM) and the DLT_KEYS (which is a base64 for public and private key of the wallet). Wilma autherize the request of the user by validating it from the keyrock IDM. On Success wilma submit the request to the Context Broker and the entity will be store. On Successfully entity creation wilma notify the CanisMajor Adaptor to persist the entity in blockchain (where the smart contract is already configured). Willma notify the CanisMajor with payload, dlt_keys in header and it also support option ctx_map (which allow user to mention what particular keys from the payload should be persist in the smart contract). Canis Major further validate the DLT_KEY (identity), create a signed transaction and submit it to the blockchain. Here we are using AEI_Contract and the createAsset method of the contract is called. On successful transacation creation the tx_reciept of the transaction will be available in canis major, which can be queried any time.","title":"Creation of an Entity (Animal, Farm etc)"},{"location":"blockchain_operations.html#adding-metadata-eventy-on-an-entity-animal-farm-etc","text":"Adding Metadata on an entity goes as follow: Actor create an request with a payload to PEP Proxy. the request is consist of the payload and in header TOKEN (generate from the keyrock IDM) and the DLT_KEYS (which is a base64 for public and private key of the wallet). Wilma autherize the request of the user by validating it from the keyrock IDM. On Success wilma submit the request to the Context Broker with the meta information and entity_id. On Successfully entity creation wilma notify the CanisMajor Adaptor to persist the entity in blockchain (where the smart contract is already configured). Willma notify the CanisMajor with payload, dlt_keys in header and it also support option ctx_map (which allow user to mention what particular keys from the payload should be persist in the smart contract). Canis Major further validate the DLT_KEY (identity), create a signed transaction and submit it to the blockchain. here the request is for adding the metadata, canis major will call AddMetadata method of the AEI Contract. On successful transacation creation the tx_reciept of the transaction will be available in canis major, which can be queried any time.","title":"Adding Metadata (eventy) on an Entity (Animal, Farm etc)"},{"location":"blockchain_operations.html#qyery","text":"Quering the data on blockchain goes as follow: Actor send a request to canis major with the Entity_ID. Canis major check the transaction details from the local storage and fetch the reciept. Canis Major futher call the AEI contarct, getAsset method and the fetch the stored hash. Hash will be returned back to the hash. **Note: the returned Hash could be a IPFS Hash, IOTAMaM hash or MerkleRoot, depend on the configuration of the CanisMajor and data from the has can be fetched or validated from the canismajor query apis (for more checkout the canismajor api specification)\"","title":"Qyery"},{"location":"datamodel.html","text":"Data Model CattleChain Project using set of standard data model developed under the FIWARE Smart Data Model Initiative. Smart Data Models. This is a collaborative initiative impulsed by FIWARE Foundation, TMForum and IUDX, and many other people and organizations contributing to the data models. These data models are open-licensed allowing free use, free modification, and free sharing of modifications. To know more about the Smart Data Model follow here github . CattleChain DataModels Animal It is the main entity of the system. It stores all the status information of the animal as its data and its states. The model is valid for dairy and meat. Example Payload { \"@context\": [ \"https://smartdatamodels.org/context.jsonld\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\" ], \"birthdate\": { \"@type\": \"DateTime\", \"@value\": \"2017-01-01T01:20:00Z\" }, \"breed\": \"Merina\", \"calvedBy\": \"urn:ngsi-ld:Animal:aa9f1295-425c-8ba3-b745-b653097d5a87\", \"fedWith\": \"urn:ngsi-ld:FEED:1ea0f120-4474-11e8-9919-0000000081\", \"healthCondition\": \"healthy\", \"id\": \"urn:ngsi-ld:Animal:ca3f1295-500c-4aa3-b745-d143097d5c01\", \"legalId\": \"ES142589652140\", \"locatedAt\": \"urn:ngsi-ld:AgriParcel:1ea0f120-4474-11e8-9919-672036642081\", \"location\": { \"coordinates\": [ -4.754444444, 41.640833333 ], \"type\": \"Point\" }, \"modifiedAt\": \"2017-05-04T12:30:00Z\", \"ownedBy\": \"http://person.org/leon\", \"phenologicalCondition\": \"adult\", \"relatedSource\": [ { \"application\": \"urn:ngsi-ld:AgriApp:72d9fb43-53f8-4ec8-a33c-fa931360259a\", \"applicationEntityId\": \"app:sheep1\" } ], \"reproductiveCondition\": \"inCalf\", \"sex\": \"female\", \"siredBy\": \"urn:ngsi-ld:Animal:aa9f1295-425c-8ba3-b745-b653097d5a87\", \"species\": \"sheep\", \"type\": \"Animal\", \"weight\": 65.3, \"welfareCondition\": \"adequate\" } Important Links Animal Data Model Github Animal Data Model Schema Animal Data Model Description Farm It is the main entity of the system. It stores all the status information of the animal as its data and its states. Example Payload { \"@context\": [ \"https://smartdatamodels.org/context.jsonld\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\" ], \"address\": { \"addressCountry\": \"ES\", \"addressLocality\": \"Valdepe\\u00f1as\", \"streetAddress\": \"Camino de Membrilla 17\", \"type\": \"PostalAddress\" }, \"contactPoint\": { \"email\": \"wheatfarm@email.com\", \"telephone\": \"00349674532\", \"type\": \"ContactPoint\" }, \"createdAt\": \"2017-01-01T01:20:00Z\", \"description\": \"A farm producing wheat\", \"hasAgriParcel\": [ \"urn:ngsi-ld:AgriParcel:26ba4be0-4474-11e8-8ec1-ab9e0ea93835\", \"urn:ngsi-ld:AgriParcel:2d5b8874-4474-11e8-8d6b-dbe14425b5e4\" ], \"hasBuilding\": [ \"urn:ngsi-ld:Building:a6ba44e0-4474-11e8-8ed1-ab9e0ea93827\", \"urn:ngsi-ld:Building:d95b8874-4474-11e8-8d6b-dbe144258354\" ], \"id\": \"urn:ngsi-ld:AgriFarm:72d9fb43-53f8-4ec8-a33c-fa931360259a\", \"landLocation\": { \"coordinates\": [ [ [ 100, 0 ], [ 101, 0 ], [ 101, 1 ], [ 100, 1 ], [ 100, 0 ] ] ], \"type\": \"Polygon\" }, \"location\": { \"coordinates\": [ 100, 0 ], \"type\": \"Point\" }, \"modifiedAt\": \"2017-05-04T12:30:00Z\", \"name\": \"Wheat farm\", \"ownedBy\": \"urn:ngsi-ld:Person:fce9dcbc-4479-11e8-9de1-cb228de7a15c\", \"relatedSource\": [ { \"application\": \"urn:ngsi-ld:AgriApp:72d9fb43-53f8-4ec8-a33c-fa931360259a\", \"applicationEntityId\": \"app:farm1\" } ], \"seeAlso\": [ \"https://example.org/concept/farm\", \"https://datamodel.org/example/farm\" ], \"type\": \"AgriFarm\" } Important Links Farm Data Model Github Farm Data Model Schema Farm Data Model Description Parcel It corresponds to the internal divisions of the farm. Example Payload { \"@context\": [ \"https://smartdatamodels.org/context.jsonld\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\" ], \"area\": 200, \"belongsTo\": \"urn:ngsi-ld:AgriFarm:f67adcbc-4479-22bc-9de1-cb228de7a765\", \"category\": \"arable\", \"createdAt\": \"2017-01-01T01:20:00Z\", \"cropStatus\": \"seeded\", \"description\": \"Spring wheat\", \"hasAgriCrop\": \"urn:ngsi-ld:AgriCrop:36021150-4474-11e8-a721-af07c5fae7c8\", \"hasAgriParcelChildren\": [ \"urn:ngsi-ld:AgriParcel:26ba4be0-4474-11e8-8ec1-ab9e0ea93835\", \"urn:ngsi-ld:AgriParcel:2d5b8874-4474-11e8-8d6b-dbe14425b5e4\" ], \"hasAgriParcelParent\": \"urn:ngsi-ld:AgriParcel:1ea0f120-4474-11e8-9919-672036642081\", \"hasAgriSoil\": \"urn:ngsi-ld:AgriSoil:429d1338-4474-11e8-b90a-d3e34ceb73df\", \"hasDevice\": [ \"urn:ngsi-ld:Device:4a40aeba-4474-11e8-86bf-03d82e958ce6\", \"urn:ngsi-ld:Device:63217d24-4474-11e8-9da2-c3dd3c36891b\", \"urn:ngsi-ld:Device:68e091dc-4474-11e8-a398-df010c53b416\", \"urn:ngsi-ld:6f44b54e-4474-11e8-8577-d7ff6a8ef551\" ], \"id\": \"urn:ngsi-ld:AgriParcel:72d9fb43-53f8-4ec8-a33c-fa931360259a\", \"lastPlantedAt\": { \"@type\": \"DateTime\", \"@value\": \"2016-08-22T10:18:16Z\" }, \"location\": { \"coordinates\": [ [ 100, 0 ], [ 101, 0 ], [ 101, 1 ], [ 100, 1 ], [ 100, 0 ] ], \"type\": \"Polygon\" }, \"modifiedAt\": \"2017-05-04T12:30:00Z\", \"ownedBy\": \"urn:ngsi-ld:Person:fce9dcbc-4479-11e8-9de1-cb228de7a15c\", \"relatedSource\": [ { \"application\": \"urn:ngsi-ld:AgriApp:72d9fb43-53f8-4ec8-a33c-fa931360259a\", \"applicationEntityId\": \"app:parcel1\" } ], \"seeAlso\": [ \"https://example.org/concept/agriparcel\", \"https://datamodel.org/example/agriparcel\" ], \"type\": \"AgriParcel\" } Important Links Parcel Data Model Github Parcel Data Model Schema Parcel Data Model Description Parcel Operation It corresponds Parcel Operation. Example Payload { \"@context\": [ \"https://smartdatamodels.org/context.jsonld\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\" ], \"createdAt\": \"2017-01-01T01:20:00Z\", \"description\": \"Monthly fertiliser application\", \"endedAt\": { \"@type\": \"DateTime\", \"@value\": \"2016-08-22T10:18:16Z\" }, \"hasAgriParcel\": \"urn:ngsi-ld:AgriParcel:318366a9-7643-4d8e-9a11-c76a8c29d8eb\", \"hasAgriProductType\": \"urn:ngsi-ld:AgriProductType:a8f616b8-13fb-473a-8e61-b7a80c6c93ec\", \"hasOperator\": \"urn:ngsi-ld:Person:fce9dcbc-4479-11e8-9de1-cb228de7a15c\", \"id\": \"urn:ngsi-ld:AgriParcelOperation:e1e9d3a3-074f-46f1-9375-52000d05a62b\", \"irrigationRecord\": \"https://example.com/agriparcelrecords/irrigationrecord1\", \"modifiedAt\": \"2017-05-04T12:30:00Z\", \"operationType\": \"fertiliser\", \"plannedEndAt\": { \"@type\": \"DateTime\", \"@value\": \"2016-08-22T10:18:16Z\" }, \"plannedStartAt\": { \"@type\": \"DateTime\", \"@value\": \"2016-08-22T10:18:16Z\" }, \"quantity\": 40, \"relatedSource\": [ { \"application\": \"urn:ngsi-ld:AgriApp:72d9fb43-53f8-4ec8-a33c-fa931360259a\", \"applicationEntityId\": \"app:parcelop1\" } ], \"reportedAt\": { \"@type\": \"DateTime\", \"@value\": \"2016-08-22T10:18:16Z\" }, \"result\": \"ok\", \"seeAlso\": [ \"https://example.org/concept/agriparcelop\", \"https://datamodel.org/example/agriparcelop\" ], \"startedAt\": { \"@type\": \"DateTime\", \"@value\": \"2016-08-22T10:18:16Z\" }, \"status\": \"finished\", \"type\": \"AgriParcelOperation\", \"waterSource\": \"rainwater capture\", \"workOrder\": \"https://example.com/agriparcelrecords/workorder1\", \"workRecord\": \"https://example.com/agriparcelrecords/workrecord1\" } Important Links Parcel Operation Data Model Github Parcel Operation Data Model Schema Parcel Operation Data Model Description Parcel Records It corresponds Parcel Operation records. Example Payload { \"@context\": [ \"https://smartdatamodels.org/context.jsonld\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\" ], \"airTemperature\": 20, \"atmosphericPressure\": 1013.25, \"createdAt\": \"2017-01-01T01:20:00Z\", \"description\": \"Monthly fertiliser application\", \"hasAgriParcel\": \"urn:ngsi-ld:AgriParcel:d3676010-d815-468c-9e01-25739c5a25ed\", \"hasDevice\": [ \"urn:ngsi-ld:Device:4a40aeba-4474-11e8-86bf-03d82e958ce6\", \"urn:ngsi-ld:Device:63217d24-4474-11e8-9da2-c3dd3c36891b\", \"urn:ngsi-ld:Device:68e091dc-4474-11e8-a398-df010c53b416\", \"urn:ngsi-ld:6f44b54e-4474-11e8-8577-d7ff6a8ef551\" ], \"id\": \"urn:ngsi-ld:AgriParcelRecord:8f5445e6-f49b-496e-833b-e65fc97fcab7\", \"leafRelativeHumidity\": 0.25, \"leafTemperature\": 25.1, \"leafWetness\": 1.0, \"location\": { \"coordinates\": [ [ 100, 0 ], [ 101, 0 ], [ 101, 1 ], [ 100, 1 ], [ 100, 0 ] ], \"type\": \"Polygon\" }, \"modifiedAt\": \"2017-05-04T12:30:00Z\", \"observedAt\": { \"@type\": \"DateTime\", \"@value\": \"2017-05-04T12:30:00Z\" }, \"relatedSource\": [ { \"application\": \"urn:ngsi-ld:AgriApp:72d9fb43-53f8-4ec8-a33c-fa931360259a\", \"applicationEntityId\": \"app:parcelrec1\" } ], \"relativeHumidity\": 0.15, \"seeAlso\": [ \"https://example.org/concept/agriparcelrec\", \"https://datamodel.org/example/agriparcelrec\" ], \"soilMoistureEc\": 17, \"soilMoistureVwc\": 0.08, \"soilSalinity\": 1198.11, \"soilTemperature\": 27, \"solarRadiation\": 15, \"type\": \"AgriParcelRecord\" } Important Links Parcel Record Data Model Github Parcel Record Data Model Schema Parcel Record Data Model Description Blockchain Transaction Receipt Blockchain trasaction receipt for the any of transaction happend in the blockchain. In this project we are using Alastria Network, which is a ethereum client. Currently transaction receipts are store in key-values but in future this payload will be used. Example Payload { \"id\":\"urn:ngsi-ld:dataModel:id:VINF:36225393\", \"type\":\"DLTtxReceipt\", \"refEntity\":{ \"type\":\"Relationship\", \"object\":\"urn:ngsi-ld:Animal:1\" }, \"TxReceipts\":{ \"type\":\"Property\", \"value\":{ \"to\":\"0x9a3dbca554e9f6b9257aaa24010da8377c57c17e\", \"from\":\"0x4c962a968ff8cc5c99688602969ada5caa3a92cb\", \"keys\":[ \"id\", \"type\", \"species\", \"legalId\", \"birthdate\", \"@context\" ], \"logs\":{ \"id\":\"log_e04a3da4\", \"data\":\"0x0000000000000000000000004c962a968ff8cc5c99688602969ada5caa3a92cb75726e3a6e6773692d6c643a416e696d616c3a310000000000000000000000000000000000000000000000000000000000000000000000000000000060802b30000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000317a6470754171367250624133745a6b694441396d425355337a3872355a37544739716970754a4c45413570384145714c58000000000000000000000000000000\", \"topics\":[ \"0x117ef0a3887baaa508b007da020a6dc877e9f3e78883d885d11e272070e45175\" ], \"logAddress\":\"0x9a3DBCa554e9f6b9257aAa24010DA8377C57c17e\", \"removed\":false, \"logIndex\":0, \"blockHash\":\"0xce0a88fa83d6b928f65f5eca653e98e81ed67702be1d4253c43b1ccb30d51f56\", \"blockNumber\":345522, \"transactionHash\":\"0x935dc16fa0b2000e609d6cc366c4fe2cb9557ec47ee94455e135af4259105517\", \"transactionIndex\":0 }, \"status\":false, \"dltType\":\"eth\", \"gasUsed\":112188, \"blockHash\":\"0xce0a88fa83d6b928f65f5eca653e98e81ed67702be1d4253c43b1ccb30d51f56\", \"logsBloom\":\"0x00000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000002000000000000000000000000000000000000000000000000000000000\", \"objectType\":\"asset\", \"blockNumber\":345522, \"storageType\":\"merkletree\", \"transactionHash\":\"0x935dc16fa0b2000e609d6cc366c4fe2cb9557ec47ee94455e135af4259105517\", \"contractAddress\":\"0x9a3DBCa554e9f6b9257aAa24010DA8377C57c17e\", \"transactionIndex\":0, \"cumulativeGasUsed\":112188 } }, \"dateCreated\":{ \"type\":\"Property\", \"value\":{ \"@type\":\"DateTime\", \"@value\":\"1970-03-25T22:57:25Z\" } }, \"dateModified\":{ \"type\":\"Property\", \"value\":{ \"@type\":\"DateTime\", \"@value\":\"2019-03-15T08:10:09Z\" } }, \"@context\":[ \"https://smartdatamodels.org/context.jsonld\" ] } Important Links DLTTxReciept Data Model Github DLTTxReciept Data Model Schema DLTTxReciept Data Model Description","title":"Data Models"},{"location":"datamodel.html#data-model","text":"CattleChain Project using set of standard data model developed under the FIWARE Smart Data Model Initiative. Smart Data Models. This is a collaborative initiative impulsed by FIWARE Foundation, TMForum and IUDX, and many other people and organizations contributing to the data models. These data models are open-licensed allowing free use, free modification, and free sharing of modifications. To know more about the Smart Data Model follow here github .","title":"Data Model"},{"location":"datamodel.html#cattlechain-datamodels","text":"","title":"CattleChain DataModels"},{"location":"datamodel.html#animal","text":"It is the main entity of the system. It stores all the status information of the animal as its data and its states. The model is valid for dairy and meat. Example Payload { \"@context\": [ \"https://smartdatamodels.org/context.jsonld\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\" ], \"birthdate\": { \"@type\": \"DateTime\", \"@value\": \"2017-01-01T01:20:00Z\" }, \"breed\": \"Merina\", \"calvedBy\": \"urn:ngsi-ld:Animal:aa9f1295-425c-8ba3-b745-b653097d5a87\", \"fedWith\": \"urn:ngsi-ld:FEED:1ea0f120-4474-11e8-9919-0000000081\", \"healthCondition\": \"healthy\", \"id\": \"urn:ngsi-ld:Animal:ca3f1295-500c-4aa3-b745-d143097d5c01\", \"legalId\": \"ES142589652140\", \"locatedAt\": \"urn:ngsi-ld:AgriParcel:1ea0f120-4474-11e8-9919-672036642081\", \"location\": { \"coordinates\": [ -4.754444444, 41.640833333 ], \"type\": \"Point\" }, \"modifiedAt\": \"2017-05-04T12:30:00Z\", \"ownedBy\": \"http://person.org/leon\", \"phenologicalCondition\": \"adult\", \"relatedSource\": [ { \"application\": \"urn:ngsi-ld:AgriApp:72d9fb43-53f8-4ec8-a33c-fa931360259a\", \"applicationEntityId\": \"app:sheep1\" } ], \"reproductiveCondition\": \"inCalf\", \"sex\": \"female\", \"siredBy\": \"urn:ngsi-ld:Animal:aa9f1295-425c-8ba3-b745-b653097d5a87\", \"species\": \"sheep\", \"type\": \"Animal\", \"weight\": 65.3, \"welfareCondition\": \"adequate\" } Important Links Animal Data Model Github Animal Data Model Schema Animal Data Model Description","title":"Animal"},{"location":"datamodel.html#farm","text":"It is the main entity of the system. It stores all the status information of the animal as its data and its states. Example Payload { \"@context\": [ \"https://smartdatamodels.org/context.jsonld\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\" ], \"address\": { \"addressCountry\": \"ES\", \"addressLocality\": \"Valdepe\\u00f1as\", \"streetAddress\": \"Camino de Membrilla 17\", \"type\": \"PostalAddress\" }, \"contactPoint\": { \"email\": \"wheatfarm@email.com\", \"telephone\": \"00349674532\", \"type\": \"ContactPoint\" }, \"createdAt\": \"2017-01-01T01:20:00Z\", \"description\": \"A farm producing wheat\", \"hasAgriParcel\": [ \"urn:ngsi-ld:AgriParcel:26ba4be0-4474-11e8-8ec1-ab9e0ea93835\", \"urn:ngsi-ld:AgriParcel:2d5b8874-4474-11e8-8d6b-dbe14425b5e4\" ], \"hasBuilding\": [ \"urn:ngsi-ld:Building:a6ba44e0-4474-11e8-8ed1-ab9e0ea93827\", \"urn:ngsi-ld:Building:d95b8874-4474-11e8-8d6b-dbe144258354\" ], \"id\": \"urn:ngsi-ld:AgriFarm:72d9fb43-53f8-4ec8-a33c-fa931360259a\", \"landLocation\": { \"coordinates\": [ [ [ 100, 0 ], [ 101, 0 ], [ 101, 1 ], [ 100, 1 ], [ 100, 0 ] ] ], \"type\": \"Polygon\" }, \"location\": { \"coordinates\": [ 100, 0 ], \"type\": \"Point\" }, \"modifiedAt\": \"2017-05-04T12:30:00Z\", \"name\": \"Wheat farm\", \"ownedBy\": \"urn:ngsi-ld:Person:fce9dcbc-4479-11e8-9de1-cb228de7a15c\", \"relatedSource\": [ { \"application\": \"urn:ngsi-ld:AgriApp:72d9fb43-53f8-4ec8-a33c-fa931360259a\", \"applicationEntityId\": \"app:farm1\" } ], \"seeAlso\": [ \"https://example.org/concept/farm\", \"https://datamodel.org/example/farm\" ], \"type\": \"AgriFarm\" } Important Links Farm Data Model Github Farm Data Model Schema Farm Data Model Description","title":"Farm"},{"location":"datamodel.html#parcel","text":"It corresponds to the internal divisions of the farm. Example Payload { \"@context\": [ \"https://smartdatamodels.org/context.jsonld\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\" ], \"area\": 200, \"belongsTo\": \"urn:ngsi-ld:AgriFarm:f67adcbc-4479-22bc-9de1-cb228de7a765\", \"category\": \"arable\", \"createdAt\": \"2017-01-01T01:20:00Z\", \"cropStatus\": \"seeded\", \"description\": \"Spring wheat\", \"hasAgriCrop\": \"urn:ngsi-ld:AgriCrop:36021150-4474-11e8-a721-af07c5fae7c8\", \"hasAgriParcelChildren\": [ \"urn:ngsi-ld:AgriParcel:26ba4be0-4474-11e8-8ec1-ab9e0ea93835\", \"urn:ngsi-ld:AgriParcel:2d5b8874-4474-11e8-8d6b-dbe14425b5e4\" ], \"hasAgriParcelParent\": \"urn:ngsi-ld:AgriParcel:1ea0f120-4474-11e8-9919-672036642081\", \"hasAgriSoil\": \"urn:ngsi-ld:AgriSoil:429d1338-4474-11e8-b90a-d3e34ceb73df\", \"hasDevice\": [ \"urn:ngsi-ld:Device:4a40aeba-4474-11e8-86bf-03d82e958ce6\", \"urn:ngsi-ld:Device:63217d24-4474-11e8-9da2-c3dd3c36891b\", \"urn:ngsi-ld:Device:68e091dc-4474-11e8-a398-df010c53b416\", \"urn:ngsi-ld:6f44b54e-4474-11e8-8577-d7ff6a8ef551\" ], \"id\": \"urn:ngsi-ld:AgriParcel:72d9fb43-53f8-4ec8-a33c-fa931360259a\", \"lastPlantedAt\": { \"@type\": \"DateTime\", \"@value\": \"2016-08-22T10:18:16Z\" }, \"location\": { \"coordinates\": [ [ 100, 0 ], [ 101, 0 ], [ 101, 1 ], [ 100, 1 ], [ 100, 0 ] ], \"type\": \"Polygon\" }, \"modifiedAt\": \"2017-05-04T12:30:00Z\", \"ownedBy\": \"urn:ngsi-ld:Person:fce9dcbc-4479-11e8-9de1-cb228de7a15c\", \"relatedSource\": [ { \"application\": \"urn:ngsi-ld:AgriApp:72d9fb43-53f8-4ec8-a33c-fa931360259a\", \"applicationEntityId\": \"app:parcel1\" } ], \"seeAlso\": [ \"https://example.org/concept/agriparcel\", \"https://datamodel.org/example/agriparcel\" ], \"type\": \"AgriParcel\" } Important Links Parcel Data Model Github Parcel Data Model Schema Parcel Data Model Description","title":"Parcel"},{"location":"datamodel.html#parcel-operation","text":"It corresponds Parcel Operation. Example Payload { \"@context\": [ \"https://smartdatamodels.org/context.jsonld\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\" ], \"createdAt\": \"2017-01-01T01:20:00Z\", \"description\": \"Monthly fertiliser application\", \"endedAt\": { \"@type\": \"DateTime\", \"@value\": \"2016-08-22T10:18:16Z\" }, \"hasAgriParcel\": \"urn:ngsi-ld:AgriParcel:318366a9-7643-4d8e-9a11-c76a8c29d8eb\", \"hasAgriProductType\": \"urn:ngsi-ld:AgriProductType:a8f616b8-13fb-473a-8e61-b7a80c6c93ec\", \"hasOperator\": \"urn:ngsi-ld:Person:fce9dcbc-4479-11e8-9de1-cb228de7a15c\", \"id\": \"urn:ngsi-ld:AgriParcelOperation:e1e9d3a3-074f-46f1-9375-52000d05a62b\", \"irrigationRecord\": \"https://example.com/agriparcelrecords/irrigationrecord1\", \"modifiedAt\": \"2017-05-04T12:30:00Z\", \"operationType\": \"fertiliser\", \"plannedEndAt\": { \"@type\": \"DateTime\", \"@value\": \"2016-08-22T10:18:16Z\" }, \"plannedStartAt\": { \"@type\": \"DateTime\", \"@value\": \"2016-08-22T10:18:16Z\" }, \"quantity\": 40, \"relatedSource\": [ { \"application\": \"urn:ngsi-ld:AgriApp:72d9fb43-53f8-4ec8-a33c-fa931360259a\", \"applicationEntityId\": \"app:parcelop1\" } ], \"reportedAt\": { \"@type\": \"DateTime\", \"@value\": \"2016-08-22T10:18:16Z\" }, \"result\": \"ok\", \"seeAlso\": [ \"https://example.org/concept/agriparcelop\", \"https://datamodel.org/example/agriparcelop\" ], \"startedAt\": { \"@type\": \"DateTime\", \"@value\": \"2016-08-22T10:18:16Z\" }, \"status\": \"finished\", \"type\": \"AgriParcelOperation\", \"waterSource\": \"rainwater capture\", \"workOrder\": \"https://example.com/agriparcelrecords/workorder1\", \"workRecord\": \"https://example.com/agriparcelrecords/workrecord1\" } Important Links Parcel Operation Data Model Github Parcel Operation Data Model Schema Parcel Operation Data Model Description","title":"Parcel Operation"},{"location":"datamodel.html#parcel-records","text":"It corresponds Parcel Operation records. Example Payload { \"@context\": [ \"https://smartdatamodels.org/context.jsonld\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\" ], \"airTemperature\": 20, \"atmosphericPressure\": 1013.25, \"createdAt\": \"2017-01-01T01:20:00Z\", \"description\": \"Monthly fertiliser application\", \"hasAgriParcel\": \"urn:ngsi-ld:AgriParcel:d3676010-d815-468c-9e01-25739c5a25ed\", \"hasDevice\": [ \"urn:ngsi-ld:Device:4a40aeba-4474-11e8-86bf-03d82e958ce6\", \"urn:ngsi-ld:Device:63217d24-4474-11e8-9da2-c3dd3c36891b\", \"urn:ngsi-ld:Device:68e091dc-4474-11e8-a398-df010c53b416\", \"urn:ngsi-ld:6f44b54e-4474-11e8-8577-d7ff6a8ef551\" ], \"id\": \"urn:ngsi-ld:AgriParcelRecord:8f5445e6-f49b-496e-833b-e65fc97fcab7\", \"leafRelativeHumidity\": 0.25, \"leafTemperature\": 25.1, \"leafWetness\": 1.0, \"location\": { \"coordinates\": [ [ 100, 0 ], [ 101, 0 ], [ 101, 1 ], [ 100, 1 ], [ 100, 0 ] ], \"type\": \"Polygon\" }, \"modifiedAt\": \"2017-05-04T12:30:00Z\", \"observedAt\": { \"@type\": \"DateTime\", \"@value\": \"2017-05-04T12:30:00Z\" }, \"relatedSource\": [ { \"application\": \"urn:ngsi-ld:AgriApp:72d9fb43-53f8-4ec8-a33c-fa931360259a\", \"applicationEntityId\": \"app:parcelrec1\" } ], \"relativeHumidity\": 0.15, \"seeAlso\": [ \"https://example.org/concept/agriparcelrec\", \"https://datamodel.org/example/agriparcelrec\" ], \"soilMoistureEc\": 17, \"soilMoistureVwc\": 0.08, \"soilSalinity\": 1198.11, \"soilTemperature\": 27, \"solarRadiation\": 15, \"type\": \"AgriParcelRecord\" } Important Links Parcel Record Data Model Github Parcel Record Data Model Schema Parcel Record Data Model Description","title":"Parcel Records"},{"location":"datamodel.html#blockchain-transaction-receipt","text":"Blockchain trasaction receipt for the any of transaction happend in the blockchain. In this project we are using Alastria Network, which is a ethereum client. Currently transaction receipts are store in key-values but in future this payload will be used. Example Payload { \"id\":\"urn:ngsi-ld:dataModel:id:VINF:36225393\", \"type\":\"DLTtxReceipt\", \"refEntity\":{ \"type\":\"Relationship\", \"object\":\"urn:ngsi-ld:Animal:1\" }, \"TxReceipts\":{ \"type\":\"Property\", \"value\":{ \"to\":\"0x9a3dbca554e9f6b9257aaa24010da8377c57c17e\", \"from\":\"0x4c962a968ff8cc5c99688602969ada5caa3a92cb\", \"keys\":[ \"id\", \"type\", \"species\", \"legalId\", \"birthdate\", \"@context\" ], \"logs\":{ \"id\":\"log_e04a3da4\", \"data\":\"0x0000000000000000000000004c962a968ff8cc5c99688602969ada5caa3a92cb75726e3a6e6773692d6c643a416e696d616c3a310000000000000000000000000000000000000000000000000000000000000000000000000000000060802b30000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000317a6470754171367250624133745a6b694441396d425355337a3872355a37544739716970754a4c45413570384145714c58000000000000000000000000000000\", \"topics\":[ \"0x117ef0a3887baaa508b007da020a6dc877e9f3e78883d885d11e272070e45175\" ], \"logAddress\":\"0x9a3DBCa554e9f6b9257aAa24010DA8377C57c17e\", \"removed\":false, \"logIndex\":0, \"blockHash\":\"0xce0a88fa83d6b928f65f5eca653e98e81ed67702be1d4253c43b1ccb30d51f56\", \"blockNumber\":345522, \"transactionHash\":\"0x935dc16fa0b2000e609d6cc366c4fe2cb9557ec47ee94455e135af4259105517\", \"transactionIndex\":0 }, \"status\":false, \"dltType\":\"eth\", \"gasUsed\":112188, \"blockHash\":\"0xce0a88fa83d6b928f65f5eca653e98e81ed67702be1d4253c43b1ccb30d51f56\", \"logsBloom\":\"0x00000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000002000000000000000000000000000000000000000000000000000000000\", \"objectType\":\"asset\", \"blockNumber\":345522, \"storageType\":\"merkletree\", \"transactionHash\":\"0x935dc16fa0b2000e609d6cc366c4fe2cb9557ec47ee94455e135af4259105517\", \"contractAddress\":\"0x9a3DBCa554e9f6b9257aAa24010DA8377C57c17e\", \"transactionIndex\":0, \"cumulativeGasUsed\":112188 } }, \"dateCreated\":{ \"type\":\"Property\", \"value\":{ \"@type\":\"DateTime\", \"@value\":\"1970-03-25T22:57:25Z\" } }, \"dateModified\":{ \"type\":\"Property\", \"value\":{ \"@type\":\"DateTime\", \"@value\":\"2019-03-15T08:10:09Z\" } }, \"@context\":[ \"https://smartdatamodels.org/context.jsonld\" ] } Important Links DLTTxReciept Data Model Github DLTTxReciept Data Model Schema DLTTxReciept Data Model Description","title":"Blockchain Transaction Receipt"},{"location":"environment.html","text":"Test Environment Production Environment","title":"Environment"},{"location":"environment.html#test-environment","text":"","title":"Test Environment"},{"location":"environment.html#production-environment","text":"","title":"Production Environment"},{"location":"evaluation.html","text":"Evaluation To be done","title":"Evaluation"},{"location":"evaluation.html#evaluation","text":"To be done","title":"Evaluation"},{"location":"future_work.html","text":"Future Work and Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . Explanation of the recommended reverse chronological release ordering. [0.2.1] - 07-2021 Alastria Network Deployment Test Account and fuecet service integration FIWARE Component deployment in k8s [0.2] - 04-2021 Ethreum Client - (Quorum Test Network) Canis Major Development and Integration NGSI-LD Usages version 0.2 demo Github Link [0.1.1] - 02-2021 version 0.1.1 ppt Link [0.1] - 08-2020 Hyperledger Sawtooth Test Network Sawtooth Transaction Processor Sawtooth Explorer NGSI-V2 Usages version 0.1 demo and ppt Link Github Link [0.0.3] - 07-2020 WP4 Report (Sawtooth Version) Link PDF Link [0.0.2] - 02-2020 Definition and terms Link [0.0.1] - 09-2019 Blockchain Adoption Report Link","title":"Future Work and Changelog"},{"location":"future_work.html#future-work-and-changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . Explanation of the recommended reverse chronological release ordering.","title":"Future Work and Changelog"},{"location":"future_work.html#021-07-2021","text":"Alastria Network Deployment Test Account and fuecet service integration FIWARE Component deployment in k8s","title":"[0.2.1] - 07-2021"},{"location":"future_work.html#02-04-2021","text":"Ethreum Client - (Quorum Test Network) Canis Major Development and Integration NGSI-LD Usages version 0.2 demo Github Link","title":"[0.2] - 04-2021"},{"location":"future_work.html#011-02-2021","text":"version 0.1.1 ppt Link","title":"[0.1.1] - 02-2021"},{"location":"future_work.html#01-08-2020","text":"Hyperledger Sawtooth Test Network Sawtooth Transaction Processor Sawtooth Explorer NGSI-V2 Usages version 0.1 demo and ppt Link Github Link","title":"[0.1] - 08-2020"},{"location":"future_work.html#003-07-2020","text":"WP4 Report (Sawtooth Version) Link PDF Link","title":"[0.0.3] - 07-2020"},{"location":"future_work.html#002-02-2020","text":"Definition and terms Link","title":"[0.0.2] - 02-2020"},{"location":"future_work.html#001-09-2019","text":"Blockchain Adoption Report Link","title":"[0.0.1] - 09-2019"},{"location":"ml_operations.html","text":"Machine Learning Operations To be done by Sensowave.","title":"ML/AI Operations"},{"location":"ml_operations.html#machine-learning-operations","text":"To be done by Sensowave.","title":"Machine Learning Operations"},{"location":"usages.html","text":"Platform Usage Creating an Identity Getting TOKEN from the IDM curl --location --request POST 'http://localhost:3005/oauth2/token' \\ --header 'Authorization: Basic MzlmZTFlZTAtNGRjOS00YmFjLTlmMDMtZjhkYzkyZjUxMzgyOmVmNzJiNjNjLWM3ZmUtNDRhOS1iZGZhLTIxZDhkZTE4MTYyMw==' \\ --header 'Content-Type: application/x-www-form-urlencoded' \\ --header 'Accept: application/json' \\ --header 'Cookie: session=eyJyZWRpciI6Ii8ifQ==; session.sig=HX0gTNYqa01FJdR9Uxe4s1mNPEA' \\ --data-raw 'username=admin@test.com&password=1234&grant_type=password' Creating an entity curl --location --request POST 'http://localhost:1027/ngsi-ld/v1/entities/' \\ --header 'X-Auth-Token: f227d2745e35ed04ebceccaa44095420dd25d0e5' \\ --header 'Content-Type: application/ld+json' \\ --header 'DLT-Token: MHg0Qzk2MkE5NjhGRjhDYzVDOTk2ODg2MDI5NjlBZGE1Q0FhM0E5MmNCOjB4ZmExYjFlM2NlZWMzNDEzNjM2YjA1MjdiOTMwNWE3MGVjMDA1NTNkM2U4MDliYWUwMDExYzYwOWY2MTg0MjUzNQ' \\ --header 'Cookie: session=eyJyZWRpciI6Ii8ifQ==; session.sig=HX0gTNYqa01FJdR9Uxe4s1mNPEA' \\ --data-raw '{ \"id\": \"urn:ngsi-ld:Animal:2\", \"type\": \"Animal\", \"modifiedAt\": \"2017-05-04T12:30:00Z\", \"species\": { \"type\": \"Property\", \"value\": \"sheep\" }, \"relatedSource\": { \"type\": \"Property\", \"value\": [ { \"application\": \"urn:ngsi-ld:AgriApp:72d9fb43-53f8-4ec8-a33c-fa931360259a\", \"applicationEntityId\": \"app:sheep1\" } ] }, \"legalId\": { \"type\": \"Property\", \"value\": \"ES142589652140\" }, \"birthdate\": { \"type\": \"Property\", \"value\": { \"@type\": \"DateTime\", \"@value\": \"2017-01-01T01:20:00Z\" } }, \"sex\": { \"type\": \"Property\", \"value\": \"female\" }, \"breed\": { \"type\": \"Property\", \"value\": \"Merina\" }, \"calvedBy\": { \"type\": \"Relationship\", \"object\": \"urn:ngsi-ld:Animal:aa9f1295-425c-8ba3-b745-b653097d5a87\" }, \"siredBy\": { \"type\": \"Relationship\", \"object\": \"urn:ngsi-ld:Animal:aa9f1295-425c-8ba3-b745-b653097d5a87\" }, \"location\": { \"type\": \"GeoProperty\", \"value\": { \"type\": \"Point\", \"coordinates\": [ -4.754444444, 41.640833333 ] } }, \"weight\": { \"type\": \"Property\", \"value\": 65.3 }, \"ownedBy\": { \"type\": \"Relationship\", \"object\": \"http://person.org/leon\" }, \"locatedAt\": { \"type\": \"Relationship\", \"object\": \"urn:ngsi-ld:AgriParcel:1ea0f120-4474-11e8-9919-672036642081\" }, \"phenologicalCondition\": { \"type\": \"Property\", \"value\": \"adult\" }, \"reproductiveCondition\": { \"type\": \"Property\", \"value\": \"inCalf\" }, \"healthCondition\": { \"type\": \"Property\", \"value\": \"healthy\" }, \"fedWith\": { \"type\": \"Relationship\", \"object\": \"urn:ngsi-ld:FEED:1ea0f120-4474-11e8-9919-0000000081\" }, \"welfareCondition\": { \"type\": \"Property\", \"value\": \"adequate\" }, \"@context\": [ \"https://smartdatamodels.org/context.jsonld\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\" ] }' Get an Entity curl --location --request GET 'http://localhost:1027/ngsi-ld/v1/entities/urn:ngsi-ld:Building:store339' \\ --header 'X-Auth-Token: 7ca19ac956f1612c53bc78669cd79688db9d33d4' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"id\": \"urn:ngsi-ld:Building:store355\", \"type\": \"AgriProductType\", \"category\": { \"type\": \"Property\", \"value\": [\"commercial\"] }, \"address\": { \"type\": \"Property\", \"value\": { \"streetAddress\": \"Bornholmer Stra\u00dfe 65\", \"addressRegion\": \"Berlin\", \"addressLocality\": \"Prenzlauer Berg\", \"postalCode\": \"10439\" }, \"verified\": { \"type\": \"Property\", \"value\": true } }, \"@context\": [ \"https://fiware.github.io/data-models/context.jsonld\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\" ] }' Updating an entity Get Blockchain Transaction Recipt Get Data from Blockchain Verify Data from Blockchain","title":"Usage"},{"location":"usages.html#platform-usage","text":"","title":"Platform Usage"},{"location":"usages.html#creating-an-identity","text":"","title":"Creating an Identity"},{"location":"usages.html#getting-token-from-the-idm","text":"curl --location --request POST 'http://localhost:3005/oauth2/token' \\ --header 'Authorization: Basic MzlmZTFlZTAtNGRjOS00YmFjLTlmMDMtZjhkYzkyZjUxMzgyOmVmNzJiNjNjLWM3ZmUtNDRhOS1iZGZhLTIxZDhkZTE4MTYyMw==' \\ --header 'Content-Type: application/x-www-form-urlencoded' \\ --header 'Accept: application/json' \\ --header 'Cookie: session=eyJyZWRpciI6Ii8ifQ==; session.sig=HX0gTNYqa01FJdR9Uxe4s1mNPEA' \\ --data-raw 'username=admin@test.com&password=1234&grant_type=password'","title":"Getting TOKEN from the IDM"},{"location":"usages.html#creating-an-entity","text":"curl --location --request POST 'http://localhost:1027/ngsi-ld/v1/entities/' \\ --header 'X-Auth-Token: f227d2745e35ed04ebceccaa44095420dd25d0e5' \\ --header 'Content-Type: application/ld+json' \\ --header 'DLT-Token: MHg0Qzk2MkE5NjhGRjhDYzVDOTk2ODg2MDI5NjlBZGE1Q0FhM0E5MmNCOjB4ZmExYjFlM2NlZWMzNDEzNjM2YjA1MjdiOTMwNWE3MGVjMDA1NTNkM2U4MDliYWUwMDExYzYwOWY2MTg0MjUzNQ' \\ --header 'Cookie: session=eyJyZWRpciI6Ii8ifQ==; session.sig=HX0gTNYqa01FJdR9Uxe4s1mNPEA' \\ --data-raw '{ \"id\": \"urn:ngsi-ld:Animal:2\", \"type\": \"Animal\", \"modifiedAt\": \"2017-05-04T12:30:00Z\", \"species\": { \"type\": \"Property\", \"value\": \"sheep\" }, \"relatedSource\": { \"type\": \"Property\", \"value\": [ { \"application\": \"urn:ngsi-ld:AgriApp:72d9fb43-53f8-4ec8-a33c-fa931360259a\", \"applicationEntityId\": \"app:sheep1\" } ] }, \"legalId\": { \"type\": \"Property\", \"value\": \"ES142589652140\" }, \"birthdate\": { \"type\": \"Property\", \"value\": { \"@type\": \"DateTime\", \"@value\": \"2017-01-01T01:20:00Z\" } }, \"sex\": { \"type\": \"Property\", \"value\": \"female\" }, \"breed\": { \"type\": \"Property\", \"value\": \"Merina\" }, \"calvedBy\": { \"type\": \"Relationship\", \"object\": \"urn:ngsi-ld:Animal:aa9f1295-425c-8ba3-b745-b653097d5a87\" }, \"siredBy\": { \"type\": \"Relationship\", \"object\": \"urn:ngsi-ld:Animal:aa9f1295-425c-8ba3-b745-b653097d5a87\" }, \"location\": { \"type\": \"GeoProperty\", \"value\": { \"type\": \"Point\", \"coordinates\": [ -4.754444444, 41.640833333 ] } }, \"weight\": { \"type\": \"Property\", \"value\": 65.3 }, \"ownedBy\": { \"type\": \"Relationship\", \"object\": \"http://person.org/leon\" }, \"locatedAt\": { \"type\": \"Relationship\", \"object\": \"urn:ngsi-ld:AgriParcel:1ea0f120-4474-11e8-9919-672036642081\" }, \"phenologicalCondition\": { \"type\": \"Property\", \"value\": \"adult\" }, \"reproductiveCondition\": { \"type\": \"Property\", \"value\": \"inCalf\" }, \"healthCondition\": { \"type\": \"Property\", \"value\": \"healthy\" }, \"fedWith\": { \"type\": \"Relationship\", \"object\": \"urn:ngsi-ld:FEED:1ea0f120-4474-11e8-9919-0000000081\" }, \"welfareCondition\": { \"type\": \"Property\", \"value\": \"adequate\" }, \"@context\": [ \"https://smartdatamodels.org/context.jsonld\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\" ] }'","title":"Creating an entity"},{"location":"usages.html#get-an-entity","text":"curl --location --request GET 'http://localhost:1027/ngsi-ld/v1/entities/urn:ngsi-ld:Building:store339' \\ --header 'X-Auth-Token: 7ca19ac956f1612c53bc78669cd79688db9d33d4' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"id\": \"urn:ngsi-ld:Building:store355\", \"type\": \"AgriProductType\", \"category\": { \"type\": \"Property\", \"value\": [\"commercial\"] }, \"address\": { \"type\": \"Property\", \"value\": { \"streetAddress\": \"Bornholmer Stra\u00dfe 65\", \"addressRegion\": \"Berlin\", \"addressLocality\": \"Prenzlauer Berg\", \"postalCode\": \"10439\" }, \"verified\": { \"type\": \"Property\", \"value\": true } }, \"@context\": [ \"https://fiware.github.io/data-models/context.jsonld\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\" ] }'","title":"Get an Entity"},{"location":"usages.html#updating-an-entity","text":"","title":"Updating an entity"},{"location":"usages.html#get-blockchain-transaction-recipt","text":"","title":"Get Blockchain Transaction Recipt"},{"location":"usages.html#get-data-from-blockchain","text":"","title":"Get Data from Blockchain"},{"location":"usages.html#verify-data-from-blockchain","text":"","title":"Verify Data from Blockchain"}]}